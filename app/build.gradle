import android.annotation.SuppressLint


plugins {
    id 'com.android.application'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'com.google.gms.google-services'
    id "org.sonarqube"

}

android {
    compileSdk 33

    lintOptions {
        baseline file("lint-baseline.xml")
        abortOnError false
        checkReleaseBuilds false
        disable 'TypographyFractions','TypographyQuotes'
        checkDependencies=true

    }

    signingConfigs {
        release {
            def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
            def allFilesFromDir = new File(tmpFilePath).listFiles()

            if (allFilesFromDir != null) {
                def keystoreFile = allFilesFromDir.first()
                keystoreFile.renameTo("keystore/your_keystore.jks")
            }

            storeFile = file("keystore/your_keystore.jks")
            storePassword System.getenv("SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
    }

    defaultConfig {
        applicationId "com.uniquindio.moviuq"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'com.uniquindio.moviuq'
}
dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.8.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.gms:play-services-auth:20.3.0'
    implementation 'com.google.firebase:firebase-database:20.1.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:3.12.4"
    androidTestImplementation "org.mockito:mockito-core:3.12.4"

    //Dependencia Lottie para animaciones
    def lottieVersion = "3.4.0"
    implementation "com.airbnb.android:lottie:$lottieVersion"


    //Dependencias FireBase
    implementation platform('com.google.firebase:firebase-bom:31.0.2')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-storage'
    implementation 'com.firebaseui:firebase-ui-firestore:8.0.1'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-messaging:23.1.0'

    //Dependenica de Google Maps
    implementation 'com.google.android.libraries.places:places:2.7.0'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'

    /** Glide is a fast and efficient open source media management and image loading framework
     * for Android that wraps media decoding, memory and disk caching, and resource pooling into a
     * simple and easy to use interface.
     * Autor :Sam Judd - @sjudd on GitHub, @samajudd on Twitter**/
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.14.2'

    /** Retrofit**/
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'com.android.support:multidex:1.0.3'

    /** Anotaciones para el analisis del codigo*/
    implementation 'com.android.support:support-annotations:28.0.0'

}

